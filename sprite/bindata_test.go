// Code generated by go-bindata.
// sources:
// testdata/t1.png
// testdata/t2.png
// testdata/t3.png
// DO NOT EDIT!

package sprite

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _testdataT1Png = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xbd\x02\x42\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x02\x84\x49\x44\x41\x54\x78\xda\x85\x92\x4d\x48\x54\x51\x14\xc7\xef\xb9\x6f\x28\x62\xa2\x42\x48\x26\x47\x86\xcc\x2f\x0c\x89\x9c\x98\x31\xa5\x70\xa8\x97\xd3\x84\x41\x1f\x0a\x2d\x74\x51\xb8\x08\x0a\x23\x6a\x15\x41\xd1\x22\x5c\x09\xb5\xe8\x03\x5a\x84\x95\x10\x94\x1b\x93\x79\xe5\x90\x58\xd3\x2a\x1a\x37\xa5\xaf\x28\x4b\x18\xca\x8a\x3e\x5c\x18\x49\xf3\xee\xed\x7f\xde\x3c\x65\x06\x89\x2e\x9c\x77\xcf\x3d\xf7\xbc\xdf\xf9\xb8\x87\x44\xc1\x6a\x4b\x24\x88\xf7\x07\xc9\xa4\x2e\xb4\xef\x89\xc7\xfd\x86\xcf\x77\x53\x29\xa7\x7f\x38\x69\x0d\x15\xde\x51\xc1\xcf\xc7\x48\xca\xc3\x50\xbf\x28\xc7\xe9\x1d\xb6\xac\x27\x6c\x4f\xb4\xee\xf2\x13\xc9\x21\x22\x6a\xc1\xd1\x72\x72\xb9\x36\x2b\x95\xd2\x4b\x00\xbb\x4d\x33\x00\xc0\x20\x1c\x1b\x05\xd1\xbc\x72\x72\x61\x6b\x24\x65\xc7\x4d\xf3\x3e\x91\xd8\xe7\xf9\xce\x6a\xa5\x7b\x94\x52\x83\x23\xa3\xa3\x73\x45\x00\x5e\x66\x2c\xb6\x42\x4a\x99\x01\xa4\x46\x69\x75\x48\x6b\x7d\x4f\x68\xd1\x08\xc0\x49\xae\x04\xe2\x87\x70\xf4\x0c\x32\x89\x3e\x7e\x9a\xd6\xd4\xd2\xdc\x74\x1b\xb5\x1d\x47\x9a\xb3\xf8\x79\x99\x34\x0c\x9b\x04\x85\xb4\xd0\x11\x00\xc6\x45\x3e\x59\x30\xc5\x35\x7c\xbb\x39\xa2\xce\xaf\x08\x32\x19\xa7\x6d\xd1\x88\x03\xdb\x24\xe4\x3c\x49\xea\x02\x68\x2f\x7b\xb3\x0d\x4e\x07\x21\xaf\x71\xee\x85\x9c\x76\x41\x5e\x0a\xa0\x7c\xc7\x37\x4b\x4d\xe1\x86\x47\x28\x64\x27\x71\x35\xb8\x26\xfe\x9b\xd5\x7c\x75\x3f\x90\x49\x27\xf6\x72\x9c\x2f\x63\xff\x03\x73\x1f\x08\x67\xa0\xfb\x20\xbf\x69\x6b\x78\xf3\x6a\x34\xe6\x04\x2e\x2a\x61\x78\x0e\x89\x41\xf6\x93\x97\x06\x50\x9c\xe1\x59\x84\x4c\x53\x3e\x01\x1b\xbe\x13\xb0\xaf\xc1\xe1\x42\x51\x13\x23\x9b\xea\x09\x29\xb3\x8d\x23\x9c\x03\xc3\xf0\x20\x9c\xf5\x00\x20\x47\xa1\xff\x82\xbe\x12\xa8\xe5\x28\xf7\x5b\x11\x80\x57\x43\x5d\xad\x1f\x81\x4c\xee\x14\x8e\xfd\xd0\x57\xd1\xc2\x8b\x93\x78\x01\x7b\x7b\x66\xc2\x9e\x5e\x32\x07\xbc\xea\xab\x2a\x4a\xa4\x34\xf0\xee\xb4\x1d\xc7\x4b\x70\xbe\x05\xce\x5d\x40\xaa\xc5\x42\x07\x05\x7d\xd6\x4a\x75\xe0\x05\x9e\xbd\x7c\xf7\x5e\x2f\x02\xea\xd6\x87\x4a\xa4\x21\x1f\xa2\xce\x2d\xf0\xe4\x0b\x7e\x99\x1d\x48\x23\xa7\x95\x73\x07\x7a\x6b\xbe\xcb\x6e\x83\xe7\x31\x27\x3d\x98\xd8\x1b\x2e\xa0\x36\x14\x0c\x62\x06\x52\xac\x22\xba\x3b\x28\xa8\x2f\xfe\x6a\xea\x03\x3f\x95\xd8\x58\x11\xf2\x29\x47\x5d\xc4\x8b\x9c\xf2\x9a\x0b\x20\x35\x6b\xad\xae\xb8\x80\x9a\xf2\xb2\xeb\xc0\x76\x7b\xb5\x8e\x61\x1e\x0e\xd8\xd3\xd9\x9f\x85\xe5\x21\x08\x21\x62\x27\x4a\xba\x0a\x46\x1f\xfc\x30\x7c\x68\x34\x5f\x56\x07\x03\x21\x3c\xe5\x18\x20\x93\xc8\xa4\xe3\x4d\xf6\xd3\x9c\xf8\xc7\xaa\x5c\x57\x1a\x05\x68\x00\x90\x34\xa6\xf6\xc8\x62\x0f\xaa\xca\x02\x92\xe7\xeb\xed\xc7\x19\x2d\xfe\xb3\x36\x04\xd6\xd2\xd4\xcc\x57\xd7\xef\x2f\xa7\x5f\xf8\xe9\xa9\xd5\x73\x21\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xe1\xd6\xc0\x04\xbd\x02\x00\x00")

func testdataT1PngBytes() ([]byte, error) {
	return bindataRead(
		_testdataT1Png,
		"testdata/t1.png",
	)
}

func testdataT1Png() (*asset, error) {
	bytes, err := testdataT1PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/t1.png", size: 701, mode: os.FileMode(416), modTime: time.Unix(1452232949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataT2Png = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x5f\x02\xa0\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\x04\x73\x42\x49\x54\x08\x08\x08\x08\x7c\x08\x64\x88\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0d\xd7\x00\x00\x0d\xd7\x01\x42\x28\x9b\x78\x00\x00\x00\x19\x74\x45\x58\x74\x53\x6f\x66\x74\x77\x61\x72\x65\x00\x77\x77\x77\x2e\x69\x6e\x6b\x73\x63\x61\x70\x65\x2e\x6f\x72\x67\x9b\xee\x3c\x1a\x00\x00\x01\xdc\x49\x44\x41\x54\x38\x8d\xa5\xd2\xb1\x6b\x93\x61\x10\x06\xf0\x5f\x8b\x83\x50\x41\x44\xa7\x3a\x3a\x14\xd4\xa1\x22\x88\x43\xd1\x25\x50\xc1\x0c\x95\x0c\x42\x74\x30\x43\x31\xa0\xd8\xa8\x85\x82\x05\x85\x4a\x90\x62\x2c\xd1\x2c\xd1\x0f\x5b\x1c\x8c\xa0\x66\x91\x2a\x22\xc1\x45\x45\x1d\xfc\x03\x2a\x38\x08\x55\x04\x5d\x44\xa5\xdf\xe1\x50\x87\x7e\x15\x91\x74\x10\x0f\x5e\x5e\xee\xee\xb9\x7b\x9f\xf7\xb9\xeb\x59\x5e\x5e\xf6\x3f\xb6\x6e\xad\x44\xa7\xd3\xe9\x43\x3f\x3e\xe5\x72\xb9\x6f\x9d\x4e\x67\x08\x97\x70\x2f\x97\xcb\x5d\x5b\xc5\xf5\x74\x63\x30\x3f\x3f\x7f\x02\x97\xf1\x35\xbb\xaf\xe3\x0d\xbe\x63\x7f\x3e\x9f\xff\xd1\x95\x41\xbb\xdd\x4e\xb0\x17\x3b\x51\xc3\xf9\x42\xa1\xb0\xd4\x6e\xb7\x73\x18\xc0\xc9\x42\xa1\xf0\x23\xc3\x56\x51\xfb\xcd\xa0\xd5\x6a\x6d\xc2\x73\x6c\xc7\xdd\x62\xb1\x78\x78\xb5\x71\xab\xd5\xda\x8a\x45\x3c\xc3\x29\x8c\xe0\x02\x76\xf5\xcc\xce\xce\xf6\xe2\x08\xce\x60\x10\x77\x71\x08\x23\xa5\x52\xe9\x11\xcc\xcd\xcd\xf5\xe1\x3d\x36\xff\x41\xf8\x62\xa9\x54\x3a\xbf\x2e\x22\xb6\xe2\x0a\xb6\xe0\x78\xb9\x5c\xbe\xd1\x6c\x36\xcf\xe1\x7e\xb3\xd9\x7c\x89\xb1\xec\x5b\x9b\xf1\x1a\x77\xb0\x50\x2e\x97\x1f\xff\x16\xb1\x5e\xaf\x0f\x22\xc1\xbe\x4a\xa5\xb2\x54\xaf\xd7\xd7\x63\x29\x7b\xe9\x03\x86\x32\xea\x33\x95\x4a\x65\xf1\x4f\xdd\xba\x4e\x01\xa6\xa7\xa7\x67\x70\x3a\x73\x17\x30\x34\x31\x31\xf1\xe5\x6f\x5c\x6f\xd7\x6a\x44\xc4\xd9\x88\xb8\x1d\x11\x22\x62\x20\x22\x1e\x4e\x4d\x4d\xf5\xfd\x8d\xeb\xca\x60\x72\x72\xb2\x1f\x37\x71\x0c\xb7\x30\x9c\xa5\x9e\x20\x5f\xad\x56\x7f\xae\xd9\x60\x7c\x7c\x7c\x83\x95\x71\x0d\xe2\x95\x95\x91\x3d\xc0\x9e\x0c\xd2\xc2\xd1\x5a\xad\xb6\x4c\x97\x55\x8e\x88\x66\x56\x0c\xbb\xb1\x11\x07\xad\xec\xc8\x00\x8a\xf8\x8c\x4a\x57\x0d\xd2\x34\xdd\x91\xa6\xa9\xec\x5c\x6d\x34\x1a\x6f\x1b\x8d\xc6\x97\x34\x4d\x87\xd3\x34\xfd\x98\xc5\xc7\x46\x47\x47\xb7\x75\x6d\x10\x11\xc7\x22\xe2\x45\x44\x3c\x8d\x88\xa9\xd5\x78\x92\x24\xef\x23\xe2\x40\x44\x2c\x46\xc4\x85\x24\x49\xde\xad\x29\xe2\xbf\xd8\x2f\xa5\xed\xd6\x56\x13\x82\x7b\x2f\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x04\x57\x7d\xdc\x5f\x02\x00\x00")

func testdataT2PngBytes() ([]byte, error) {
	return bindataRead(
		_testdataT2Png,
		"testdata/t2.png",
	)
}

func testdataT2Png() (*asset, error) {
	bytes, err := testdataT2PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/t2.png", size: 607, mode: os.FileMode(416), modTime: time.Unix(1452232964, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _testdataT3Png = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\x63\x02\x9c\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xd5\x09\x1a\x0c\x13\x39\x8b\x63\xc2\x48\x00\x00\x01\xf0\x49\x44\x41\x54\x38\xcb\xa5\x92\x4b\x68\x13\x61\x14\x85\xbf\x99\xf8\x4c\x8a\x4d\x14\x0a\x82\x4a\xb0\xcc\xc6\x85\xb6\xdd\x45\xac\x2e\x34\x14\x62\x66\xeb\x42\x70\x21\x54\xa4\xa8\xb5\x2d\x12\x52\x02\x15\x03\x43\x42\xa0\x6b\x41\x74\x65\x40\x8a\xe2\xc2\x89\x8d\xd0\x62\x57\x82\xd2\x36\x89\x49\x17\x15\x82\x55\x69\xd3\x97\x86\x20\x44\x44\x3a\x33\x6e\x66\x86\x31\x1d\xeb\xc2\xb3\xfb\xb9\xe7\x9c\x7b\xef\xb9\x3f\xfc\x27\x04\xe7\x23\x9d\x51\xa2\x80\x0a\xc8\xf1\x58\x22\xf7\x17\x4d\x34\x9d\x51\x6c\x8e\xd8\x52\x54\xfb\xaf\xf6\x03\xa8\xa6\x99\xab\xf8\xfa\xb5\x01\xcd\x6c\xb4\x1d\xe9\x8c\x62\x34\x1a\x75\x23\x9d\x51\x0c\xf7\x5a\xc3\xaa\x45\x01\xc4\x74\x46\x89\x5a\x64\xab\xab\xd7\xdb\xe6\x66\x1c\x05\x78\xf0\xf0\x3e\xf1\x58\x42\x06\x72\x00\x22\xa0\x0e\xde\x1c\x32\x9e\x3e\x9b\x30\x00\xf5\xf6\xad\x11\x36\xd7\xd7\x90\x3a\x25\xea\xf5\xaf\xf7\x5a\xb3\x89\xdd\x19\x15\x2c\x31\x80\x60\x15\x6f\x0c\x0c\x1a\x9a\xb6\x25\xe8\xba\x6e\xe8\xba\x46\x61\x7e\x4e\x28\xbc\x2f\x02\xc8\x3b\x05\x2b\xb4\x74\xb0\x11\xe9\xbb\x48\xb9\x52\x61\xb9\xf6\x05\x20\x19\x8f\x25\xee\xfe\xf3\x8c\x4e\xbc\xca\xbf\x34\x4a\x95\x12\xdd\x27\x7b\x28\x96\x0b\x98\x13\x4c\x02\xba\xab\x41\x30\x92\x3a\x0c\xd4\xac\xf7\x95\x90\x4e\xd7\x09\x89\xa3\x47\x8e\xd1\x6c\x36\x79\x37\xf7\x16\xb7\x35\x3c\x4e\xf1\xf8\x70\x98\xbe\x50\x27\x1d\x01\x2f\xd9\x99\x4d\x8e\xb7\x7f\x4b\x2e\x7d\x5e\x3a\xd7\x7d\xaa\x87\x80\x3f\xc0\x4a\x6d\xf9\xf2\x85\xf0\xf9\xf9\xe9\xa9\xd7\x55\xc0\x00\x10\x83\x91\x54\x17\x50\x7b\x34\x26\x33\x5b\x5e\x64\xb6\xbc\x48\xc7\x41\x1f\x00\xe6\xde\x72\x2e\xff\x02\x49\x92\x38\x7b\xba\xd7\xfa\x64\x76\x1e\x22\x50\x1c\x1f\x0e\x33\xf5\xa6\xc4\x96\xa6\x23\xee\xf3\xb3\x51\x6f\xda\x23\x9a\x23\xcb\xd9\x27\x8f\x39\xd0\xee\xe7\x4c\xa8\x17\x60\xcc\x69\x00\xc0\xee\x5d\x1e\xf6\xf8\x0e\xf1\xf3\xc7\x2f\xb2\xf9\x05\x80\x70\xab\x49\x2e\xaf\x52\xfd\x58\xfd\x23\x6c\x11\x60\x65\xe3\x3b\xfb\x7d\x01\xda\xf6\x7a\x78\x3e\xf3\x01\x20\xfc\x69\x72\x74\xda\x49\x34\x4d\x92\x6b\xeb\xab\x0b\x40\xd2\xbe\x42\x30\x92\xba\x04\x4c\x38\xb8\xdb\xc4\x3b\xe1\x37\x37\xe2\xd5\xf6\xea\xbc\x54\xbc\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xe2\xeb\xdb\xaa\x63\x02\x00\x00")

func testdataT3PngBytes() ([]byte, error) {
	return bindataRead(
		_testdataT3Png,
		"testdata/t3.png",
	)
}

func testdataT3Png() (*asset, error) {
	bytes, err := testdataT3PngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "testdata/t3.png", size: 611, mode: os.FileMode(416), modTime: time.Unix(1452232984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"testdata/t1.png": testdataT1Png,
	"testdata/t2.png": testdataT2Png,
	"testdata/t3.png": testdataT3Png,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"testdata": &bintree{nil, map[string]*bintree{
		"t1.png": &bintree{testdataT1Png, map[string]*bintree{}},
		"t2.png": &bintree{testdataT2Png, map[string]*bintree{}},
		"t3.png": &bintree{testdataT3Png, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

